name: CI


on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false

      - name: Update version
        run: poetry version patch  # Atualize a versão conforme necessário

      - name: Install project dependencies
        run: poetry install

      - name: Check existing version on PyPI
        id: check_version
        run: |
          cd tonicnet
          PACKAGE_NAME="tonicnet"
          PACKAGE_VERSION=$(poetry version --short)
          RESPONSE_CODE=$(curl --write-out "%{http_code}" --silent --output /dev/null "https://pypi.org/pypi/$PACKAGE_NAME/$PACKAGE_VERSION/json")
          echo "::set-output name=version_exists::$(if [ $RESPONSE_CODE -eq 200 ]; then echo 'true'; else echo 'false'; fi)"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          VERSION_EXISTS=$(echo "${{ steps.check_version.outputs.version_exists }}" | tr '[:upper:]' '[:lower:]')
          if [ "$VERSION_EXISTS" = "false" ]; then
             cd tonicnet
            poetry build
            poetry publish --username Abraao1231 --password ${{ secrets.POETRY_PASSWORD }}
          else
            echo "Version already exists on PyPI. Skipping upload."
          fi

      
