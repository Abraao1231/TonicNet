name: Docker Image and PyPI Publish CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Build the Docker image
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker build -t abraao1231/tonicnet .
          docker tag abraao1231/tonicnet:latest abraao1231/tonicnet:${{ github.sha }}
          docker push abraao1231/tonicnet:latest

  publish_pypi:
    runs-on: ubuntu-latest
    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install project dependencies 
        run: |
          pip install poetry

      - name: Check for changes
        id: check_changes
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} HEAD)
          echo "changes=${CHANGES}" >> $GITHUB_ENV

      - name: Update version
        id: update_version
        run: |
          cd tonicnet 
          CHANGES="${{ env.CHANGES }}"
          if [ -n "$CHANGES" ]; then
            poetry version patch  # Atualize a versão conforme necessário
          fi
          
      - name: Check if package exists on PyPI
        id: check_pypi_package
        run: |
          PACKAGE_NAME="tonicnet"
          CURRENT_VERSION=$(poetry version --no-ansi | cut -d' ' -f2)
          LATEST_VERSION=$(poetry search $PACKAGE_NAME | grep -E "^$PACKAGE_NAME\s+\[.*\]\s+[^,]+," | cut -d',' -f2)
          if [ "$CURRENT_VERSION" == "$LATEST_VERSION" ]; then
            echo "::set-output name=package_exists::true"
          else
            echo "::set-output name=package_exists::false"
          fi
          
      - name: Publish to PyPI
        if: steps.check_pypi_package.outputs.package_exists == 'false'
        run: |
          cd tonicnet
          poetry build
          poetry publish --username Abraao1231 --password ${{ secrets.POETRY_PASSWORD }}
